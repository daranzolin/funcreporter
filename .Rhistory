Sys.getenv("FUNCREPORTER_PKG")
Sys.getenv("TWITTER_PAT")
set_funcreporter_pkg <- function(pkg_name) {
Sys.setenv(FUNCREPORTER_PKG = pkg_name)
}
usethis::edit_r_environ()
Sys.getenv("FUNCREPORTER_PKG")
set_funcreporter_pkg("rsfsu")
Sys.getenv("FUNCREPORTER_PKG")
template_path <- function(template_name) file.path(.libPaths(), Sys.getenv("FUNCREPORTER_PKG"),
"rmarkdown", "templates", template_name,
"skeleton")
existing_templates <- function() dir(file.path(.libPaths(), Sys.getenv("FUNCREPORTER_PKG"),
"rmarkdown", "templates"))
template_path()
template_path("4th-week-summary")
template_path("4th-week-summarfsdsdy")
existing_templates()
template_path <- function(template_name) {
if (!template_name %in% existing_templates()) {
stop("Template does not exist", call. = FALSE)
}
file.path(.libPaths(),
Sys.getenv("FUNCREPORTER_PKG"),
"rmarkdown", "templates", template_name, "skeleton")
}
template_path("4th-week-summarfsdsdy")
template_path("4th-week-summary")
copy_skeleton_files <- function(template_name, path_to) {
template_files <- dir(template_path(template_name), full.names = TRUE)
new_files <- file.path(path_to, basename(template_files))
print(new_files)
}
copy_skeleton_files("4th-week-summary", "R")
template_path("4th-week-summary")
dir(template_path("4th-week-summary"), full.names = TRUE)
dir(template_path("4th-week-summary"))
dir(template_path("4th-week-summargy"))
dir.exists(template_path("4th-week-summary"))
dir(template_path("4th-week-summary"))
rsfsu::update_rsfsu()
rsfsu::update_rsfsu(force = TRUE)
dir.exists(template_path("4th-week-summary"))
dir(template_path("4th-week-summary"))
copy_skeleton_files("4th-week-summary", "R")
?usethis::use_rmarkdown_template
file.path(.libPaths(),
Sys.getenv("FUNCREPORTER_PKG"),
"rmarkdown", "templates")
dir(file.path(.libPaths(),
Sys.getenv("FUNCREPORTER_PKG"),
"rmarkdown", "templates"))
dir(file.path(.libPaths(),
Sys.getenv("FUNCREPORTER_PKG"),
"rmarkdown", "templates"), full.names = TRUE)
dir(file.path(.libPaths(),
Sys.getenv("FUNCREPORTER_PKG"),
"rmarkdown", "templates"), full.names = TRUE, recursive = TRUE)
library(tidyverse)
dir(file.path(.libPaths(),
Sys.getenv("FUNCREPORTER_PKG"),
"rmarkdown", "templates"), full.names = TRUE, recursive = TRUE) %>% keep(~grepl("template.yaml", .x))
get_report_descriptions <- function() {
template_files <- dir(file.path(.libPaths(),
Sys.getenv("FUNCREPORTER_PKG"),
"rmarkdown", "templates"),
full.names = TRUE, recursive = TRUE)
yaml_files <- template_files[grepl("template.yaml$", template_files)]
yaml_files
}
get_report_descriptions()
readLines(""C:/Users/918831919/Documents/R/R-3.6.0/library/rsfsu/rmarkdown/templates/4th-week-summary/template.yaml"")
readLines("C:/Users/918831919/Documents/R/R-3.6.0/library/rsfsu/rmarkdown/templates/4th-week-summary/template.yaml")
yaml::read_yaml("C:/Users/918831919/Documents/R/R-3.6.0/library/rsfsu/rmarkdown/templates/4th-week-summary/template.yaml")
print_report_descriptions <- function() {
pkg_name <- Sys.getenv("FUNCREPORTER_PKG")
template_files <- dir(file.path(.libPaths(),
pkg_name, "rmarkdown", "templates"),
full.names = TRUE, recursive = TRUE)
yaml_files <- template_files[grepl("template.yaml$", template_files)]
n_templates <- length(yaml_files)
message(glue::glue("Showing names and descriptions of {n_templates} in the {pkg_name} package..."))
lapply(yaml_files, function(x) {
y <- yaml::read_yaml(x)
cat("Name: ", y$name, "\n")
cat("Description: ", y$description, "\n")
cat("Create dir?: ", y$create_dir, "\n")
cat("---------------------------------")
})
}
print_report_descriptions()
print_report_descriptions <- function() {
pkg_name <- Sys.getenv("FUNCREPORTER_PKG")
template_files <- dir(file.path(.libPaths(),
pkg_name, "rmarkdown", "templates"),
full.names = TRUE, recursive = TRUE)
yaml_files <- template_files[grepl("template.yaml$", template_files)]
n_templates <- length(yaml_files)
message(glue::glue("Showing names and descriptions of {n_templates} in the {pkg_name} package..."))
lapply(yaml_files, function(x) {
y <- yaml::read_yaml(x)
cat("Name: ", y$name, "\n")
cat("Description: ", y$description, "\n")
cat("Create dir?: ", y$create_dir, "\n")
cat("---------------------------------", "\n")
})
}
print_report_descriptions()
print_report_descriptions <- function() {
pkg_name <- Sys.getenv("FUNCREPORTER_PKG")
template_files <- dir(file.path(.libPaths(),
pkg_name, "rmarkdown", "templates"),
full.names = TRUE, recursive = TRUE)
yaml_files <- template_files[grepl("template.yaml$", template_files)]
n_templates <- length(yaml_files)
message(glue::glue("Showing names and descriptions of {n_templates} in the {pkg_name} package..."))
lapply(yaml_files, function(x) {
y <- yaml::read_yaml(x)
cat("---------------------------------", "\n")
cat("Name: ", y$name, "\n")
cat("Description: ", y$description, "\n")
cat("Create dir?: ", ifelse(y$create_dir, y$create_dir, FALSE), "\n")
cat("---------------------------------", "\n")
})
}
print_report_descriptions()
print_report_descriptions <- function() {
pkg_name <- Sys.getenv("FUNCREPORTER_PKG")
template_files <- dir(file.path(.libPaths(),
pkg_name, "rmarkdown", "templates"),
full.names = TRUE, recursive = TRUE)
yaml_files <- template_files[grepl("template.yaml$", template_files)]
n_templates <- length(yaml_files)
message(glue::glue("Showing names and descriptions of {n_templates} in the {pkg_name} package..."))
cat("---------------------------------", "\n")
lapply(yaml_files, function(x) {
y <- yaml::read_yaml(x)
cat("Name: ", y$name, "\n")
cat("Description: ", y$description, "\n")
cat("Create dir?: ", ifelse(y$create_dir, y$create_dir, FALSE), "\n")
cat("---------------------------------", "\n")
})
}
print_report_descriptions()
print_report_descriptions <- function() {
pkg_name <- Sys.getenv("FUNCREPORTER_PKG")
template_files <- dir(file.path(.libPaths(),
pkg_name, "rmarkdown", "templates"),
full.names = TRUE, recursive = TRUE)
yaml_files <- template_files[grepl("template.yaml$", template_files)]
n_templates <- length(yaml_files)
message(glue::glue("Showing names and descriptions of {n_templates} in the {pkg_name} package..."))
cat("---------------------------------", "\n")
for (i in seq_along(yaml_files)) {
y <- yaml::read_yaml(yaml_files[i])
cat("Name: ", y$name, "\n")
cat("Description: ", y$description, "\n")
cat("Create dir?: ", ifelse(y$create_dir, y$create_dir, FALSE), "\n")
cat("---------------------------------", "\n")
}
}
print_report_descriptions()
print_report_descriptions <- function() {
pkg_name <- Sys.getenv("FUNCREPORTER_PKG")
template_files <- dir(file.path(.libPaths(), pkg_name, "rmarkdown", "templates"), full.names = TRUE, recursive = TRUE)
yaml_files <- template_files[grepl("template.yaml$", template_files)]
n_templates <- length(yaml_files)
message(glue::glue("Showing names and descriptions of {n_templates} in the {pkg_name} package..."))
cat("---------------------------------", "\n")
for (i in seq_along(yaml_files)) {
y <- yaml::read_yaml(yaml_files[i])
cat("Name: ", y$name, "\n")
crayon::italic(cat("Description: ", y$description, "\n"))
cat("Create dir?: ", ifelse(y$create_dir, y$create_dir, FALSE), "\n")
cat("---------------------------------", "\n")
}
}
print_report_descriptions()
print_report_descriptions <- function() {
pkg_name <- Sys.getenv("FUNCREPORTER_PKG")
template_files <- dir(file.path(.libPaths(), pkg_name, "rmarkdown", "templates"), full.names = TRUE, recursive = TRUE)
yaml_files <- template_files[grepl("template.yaml$", template_files)]
n_templates <- length(yaml_files)
message(glue::glue("Showing names and descriptions of {n_templates} in the {pkg_name} package..."))
cat("---------------------------------", "\n")
for (i in seq_along(yaml_files)) {
y <- yaml::read_yaml(yaml_files[i])
cat("Name: ", y$name, "\n")
cat("Description: ", crayon::italic(y$description), "\n")
cat("Create dir?: ", ifelse(y$create_dir, y$create_dir, FALSE), "\n")
cat("---------------------------------", "\n")
}
}
print_report_descriptions()
print_report_descriptions <- function() {
pkg_name <- Sys.getenv("FUNCREPORTER_PKG")
template_files <- dir(file.path(.libPaths(), pkg_name, "rmarkdown", "templates"), full.names = TRUE, recursive = TRUE)
yaml_files <- template_files[grepl("template.yaml$", template_files)]
n_templates <- length(yaml_files)
message(glue::glue("Showing names and descriptions of {n_templates} in the {pkg_name} package..."))
cat("---------------------------------", "\n")
for (i in seq_along(yaml_files)) {
y <- yaml::read_yaml(yaml_files[i])
cat("Name: ", crayon::bold(y$name), "\n")
cat("Description: ", crayon::italic(y$description), "\n")
cat("Create dir?: ", ifelse(y$create_dir, y$create_dir, FALSE), "\n")
cat("---------------------------------", "\n")
}
}
print_report_descriptions()
yaml::read_yaml("C:/Users/918831919/Documents/R/R-3.6.0/library/rsfsu/rmarkdown/templates/4th-week-summary/template.yaml")
x <- yaml::read_yaml("C:/Users/918831919/Documents/R/R-3.6.0/library/rsfsu/rmarkdown/templates/4th-week-summary/template.yaml")
x$description
print_report_descriptions <- function() {
pkg_name <- Sys.getenv("FUNCREPORTER_PKG")
template_files <- dir(file.path(.libPaths(), pkg_name, "rmarkdown", "templates"), full.names = TRUE, recursive = TRUE)
yaml_files <- template_files[grepl("template.yaml$", template_files)]
n_templates <- length(yaml_files)
message(glue::glue("Showing names and descriptions of {n_templates} in the {pkg_name} package..."))
cat("---------------------------------", "\n")
for (i in seq_along(yaml_files)) {
y <- yaml::read_yaml(yaml_files[i])
cat("Name: ", crayon::bold(y$name), "\n")
cat("Description: ", crayon::italic(y$description, ifelse(grepl("\n$", y$description), "", "\n")))
cat("Create dir?: ", ifelse(y$create_dir, y$create_dir, FALSE), "\n")
cat("---------------------------------", "\n")
}
}
print_report_descriptions()
print_report_descriptions <- function() {
pkg_name <- Sys.getenv("FUNCREPORTER_PKG")
template_files <- dir(file.path(.libPaths(), pkg_name, "rmarkdown", "templates"), full.names = TRUE, recursive = TRUE)
yaml_files <- template_files[grepl("template.yaml$", template_files)]
n_templates <- length(yaml_files)
message(glue::glue("Showing names and descriptions of {n_templates} templates in the {pkg_name} package..."))
cat("---------------------------------", "\n")
for (i in seq_along(yaml_files)) {
y <- yaml::read_yaml(yaml_files[i])
cat("Name: ", crayon::bold(y$name), "\n")
cat("Description: ", crayon::italic(y$description, ifelse(grepl("\n$", y$description), "", "\n")))
cat("Create dir?: ", ifelse(y$create_dir, y$create_dir, FALSE), "\n")
cat("---------------------------------", "\n")
}
}
print_report_descriptions()
usethis::use_mit_license()
options(usethis.full_name = "David Ranzolin")
usethis::use_mit_license()
usethis::use_package("here")
usethis::use_package("purrr")
usethis::use_package("fs")
?rmarkdown::render
devtools::document()
usethis::use_package("rmarkdown")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
usethis::use_package("crayon")
usethis::use_package("glue")
usethis::use_package("yaml")
devtools::document()
existing_templates()
set_funcreporter_pkg <- function(pkg_name) {
Sys.setenv(FUNCREPORTER_PKG = pkg_name)
message(glue::glue("Setting env variable FUNCREPORTER={pkg_name}"))
path_to_template <- file.path(.libPaths(), pkg_name, "rmarkdown", "templates")
Sys.setenv(FUNCREPORTER_PATH_TO_TEMPLATES = path_to_template)
message(glue::glue("Setting env variable FUNCREPORTER_PATH_TO_TEMPLATES={path_to_template}"))
}
usethis::edit_r_environ()
devtools::document()
set_funcreporter_pkg <- function(pkg_name) {
Sys.setenv(FUNCREPORTER_PKG = pkg_name)
message(glue::glue("Setting env var FUNCREPORTER={pkg_name}"))
path_to_template <- file.path(.libPaths(), pkg_name, "rmarkdown", "templates")
Sys.setenv(FUNCREPORTER_PATH_TO_TEMPLATES = path_to_template)
message(glue::glue("Setting env var FUNCREPORTER_PATH_TO_TEMPLATES={path_to_template}"))
}
set_funcreporter_pkg("rsfsu")
usethis::edit_r_environ()
Sys.setenv("FUNCREPORTER_PKG")
Sys.getenv("FUNCREPORTER_PKG")
Sys.getenv("FUNCREPORTER_PATH_TO_TEMPLATES")
template_path <- function(template_name) {
file.path(Sys.getenv("FUNCREPORTER_PATH_TO_TEMPLATES"), template_name, "skeleton")
}
existing_templates <- function() {
dir(Sys.getenv("FUNCREPORTER_PATH_TO_TEMPLATES"))
}
existing_templates()
template_path()
template_path("4th-week-summary")
usethis::edit_r_environ()
set_funcreporter_pkg <- function(pkg_name) {
Sys.setenv(FUNCREPORTER_PKG = pkg_name)
message(glue::glue("Setting env var FUNCREPORTER_PKG={pkg_name}"))
path_to_template <- file.path(.libPaths(), pkg_name, "rmarkdown", "templates")
Sys.setenv(FUNCREPORTER_PATH_TO_TEMPLATES = path_to_template)
message(glue::glue("Setting env var FUNCREPORTER_PATH_TO_TEMPLATES={path_to_template}"))
}
set_funcreporter_pkg("rsfsu")
template_path("4th-week-summary")
template_path()
template_path("4th-week-summary")
Sys.getenv("FUNCREPORTER_PATH_TO_TEMPLATES")
devtools::load_all()
print_report_descriptions()
devtools::load_all()
print_report_descriptions()
funcreporter("4th-week-summary", "test1.html", params = list(term = 20192))
devtools::load_all()
funcreporter("4th-week-summary", "test1.html", params = list(term = 20192))
devtools::check()
devtools::document()
devtools::document()
devtools::check()
?usethis::use_namespace()
usethis::use_package("utils")
devtools::document()
devtools::check()
usethis::use_rmarkdown_template("Sample Template", template_create_dir = TRUE)
?hist
s <- "Setosa"
pd <- iris[iris$Species == s,]
pd
s <- "setosa"
pd <- iris[iris$Species == s,]
hist(pd$Sepal.Length)
hist(pd$Sepal.Length, title = "fdssdf")
hist(pd$Sepal.Length, main = paste("Sepal lengths of the", s, "species"))
hist(pd$Sepal.Length, main = paste("Sepal lengths of the", s, "species"))
knit_with_parameters('C:/Users/918831919/Desktop/repos/funcreporter/inst/rmarkdown/templates/sample-template/skeleton/skeleton.Rmd')
knit_with_parameters('C:/Users/918831919/Desktop/repos/funcreporter/inst/rmarkdown/templates/sample-template/skeleton/skeleton.Rmd')
devtools::document()
devtools::load_all()
?funcreporter
devtools::load_all()
devtools::document()
devtools::load_all()
?funcreporter
devtools::load_all()
funcreporter(template_name = "sample-template", output_file = "setosa-report.html", params = list(species = "versicolor"))
set_funcreporter_pkg("funcreporter")
funcreporter(template_name = "sample-template", output_file = "setosa-report.html", params = list(species = "versicolor"))
devtools::install()
funcreporter(template_name = "sample-template", output_file = "setosa-report.html", params = list(species = "versicolor"))
funcreporter(template_name = "sample-template", output_file = "setosa-report.html", params = list(species = "versicolor"), view = TRUE)
print_report_descriptions()
devtools::document()
fs::path_dir("setosa-report.html")
file.info("setosa.html")
?openPDF
?openPDF
system("open 'LICENSE.md'")
system("pwd")
system("pwdfdsdf")
system("cd")
system("%cd%")
knit_with_parameters('C:/Users/918831919/Desktop/repos/funcreporter/inst/rmarkdown/templates/sample-template/skeleton/skeleton.Rmd')
tinytex::install_tinytex()
